<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | My Octopress Blog]]></title>
  <link href="http://IamAlchemist.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://IamAlchemist.github.io/"/>
  <updated>2015-09-23T14:40:46+08:00</updated>
  <id>http://IamAlchemist.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create Universal Framework]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/07/22/create-universal-framework/"/>
    <updated>2015-07-22T19:45:58+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/07/22/create-universal-framework</id>
    <content type="html"><![CDATA[<p>xcode很有意思，当选择平台是iOS device时，framework支持的architecture是arm系列的，然而如果是iOS simulator的话，又仅产生支持x86_64系列的architecture。</p>

<p>那么当我们如何编译framework时使它可以支持所有architecture呢</p>

<p><a href="https://medium.com/@syshen/create-an-ios-universal-framework-148eb130a46c">参考资料1</a></p>

<p><a href="https://kodmunki.wordpress.com/2015/03/04/cocoa-touch-frameworks-for-ios8-remix/">参考资料2</a></p>

<!--more-->


<p>要点如下：</p>

<p>在build phases里增加一个脚本</p>

<pre><code>######################
# Options
######################

REVEAL_ARCHIVE_IN_FINDER=false

FRAMEWORK_NAME="${PROJECT_NAME}"

SIMULATOR_LIBRARY_PATH="${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${FRAMEWORK_NAME}.framework"

DEVICE_LIBRARY_PATH="${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_NAME}.framework"

UNIVERSAL_LIBRARY_DIR="${BUILD_DIR}/${CONFIGURATION}-iphoneuniversal"

FRAMEWORK="${UNIVERSAL_LIBRARY_DIR}/${FRAMEWORK_NAME}.framework"


######################
# Build Frameworks
######################

xcodebuild -workspace ${PROJECT_NAME}.xcworkspace -scheme ${PROJECT_NAME} -sdk iphonesimulator -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphonesimulator 2&gt;&amp;1

xcodebuild -workspace ${PROJECT_NAME}.xcworkspace -scheme ${PROJECT_NAME} -sdk iphoneos -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphoneos 2&gt;&amp;1

######################
# Create directory for universal
######################

rm -rf "${UNIVERSAL_LIBRARY_DIR}"

mkdir "${UNIVERSAL_LIBRARY_DIR}"

mkdir "${FRAMEWORK}"


######################
# Copy files Framework
######################

cp -r "${DEVICE_LIBRARY_PATH}/." "${FRAMEWORK}"


######################
# Make an universal binary
######################

lipo "${SIMULATOR_LIBRARY_PATH}/${FRAMEWORK_NAME}" "${DEVICE_LIBRARY_PATH}/${FRAMEWORK_NAME}" -create -output "${FRAMEWORK}/${FRAMEWORK_NAME}" | echo

# For Swift framework, Swiftmodule needs to be copied in the universal framework
if [ -d "${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
    cp -f ${SIMULATOR_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/* "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

if [ -d "${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/" ]; then
    cp -f ${DEVICE_LIBRARY_PATH}/Modules/${FRAMEWORK_NAME}.swiftmodule/* "${FRAMEWORK}/Modules/${FRAMEWORK_NAME}.swiftmodule/" | echo
fi

######################
# On Release, copy the result to release directory
######################

OUTPUT_DIR="${PROJECT_DIR}/Output/${FRAMEWORK_NAME}-${CONFIGURATION}-iphoneuniversal/"

rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

cp -r "${FRAMEWORK}" "$OUTPUT_DIR"

if [ ${REVEAL_ARCHIVE_IN_FINDER} = true ]; then
    open "${OUTPUT_DIR}/"
fi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用代码来控制AutoLayout]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/07/16/working-with-auto-layout-programmatically/"/>
    <updated>2015-07-16T14:15:18+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/07/16/working-with-auto-layout-programmatically</id>
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutinCode/AutoLayoutinCode.html">Apple参考文档</a></p>

<h3>创建Constraint</h3>

<p>你可以使用<code>NSLayoutConstraint</code>来表示constrains。</p>

<p>如果要创建constraints，一般要使用 <code>constraintsWithVisualFormat:options:metrics:views:</code>。</p>

<p>第一个参数是一个<code>visual format string</code>，这种<code>visual format language</code>已经尽可能的是自我解释的。一个view使用一个方括号来代表，view之间的连接用横杠来代表。<code>visual format language</code>的语法参见<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html#//apple_ref/doc/uid/TP40010853-CH3-SW1">Visual Format Language</a></p>

<p>比如说，</p>

<p><img class="center" src="/images/iOS/2015-07-16_1.png" width="273"></p>

<p>上图可以表示为:</p>

<pre><code>[button1]-12-[button2]
</code></pre>

<p>如果是标准的Aqua距离的话，可以不用标注数字</p>

<pre><code>[button1]-[button2]
</code></pre>

<!--more-->


<p>view的名字来自于参数<code>views</code>字典。key就是这里用到名字，而value是对应的view对象。</p>

<p>可以使用<code>NSDictionaryOfVariableBindings</code>来创建该字典，该函数使用view对象的名字来作为key值</p>

<pre><code>NSDictionary *viewsDictionary =
    NSDictionaryOfVariableBindings(self.button1, self.button2);

NSArray *constraints =
    [NSLayoutConstraint constraintsWithVisualFormat:@"[button1]-[button2]"
                        options:0 metrics:nil views:viewsDictionary];
</code></pre>

<p>并不是每一种constraint都可以通过visual format language来表示的。比如有一种常用的constraint不能用该语言来表达，比如固定宽高比，这时候需要用这样的函数：</p>

<p><code>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constraint:</code></p>

<p>比如上面contraint还可以这样创建</p>

<pre><code>[NSLayoutConstraint constraintWithItem:self.button1 
                             attribute:NSLayoutAttributeRight
                             relatedBy:NSLayoutRelationEqual 
                                toItem:self.button2
                             attribute:NSLayoutAttributeLeft 
                            multiplier:1.0 
                              constant:-12.0];
</code></pre>

<h3>Installing Constraints</h3>

<p>我们必须把constraint加到view中，这个view应该是所有涉及到的view的祖先view，通常是最近的那个祖先view。</p>

<p>关于这个我们可以使用<code>NSView</code>的<code>addConstraint:</code></p>

<p>相关的函数还有：</p>

<ul>
<li><code>removeConstraint:</code></li>
<li><code>constraints</code></li>
<li><code>fittingSize</code></li>
</ul>


<h3>参考资料</h3>

<ul>
<li>最重要的一个开源库可以帮助我们不用写那么多无聊的代码</li>
</ul>


<p><a href="https://github.com/SnapKit/Masonry">Masonry</a></p>

<pre><code>[view1 mas_makeConstraints:^(MASConstraintMaker *make) {
    make.edges.equalTo(superview).with.insets(padding);
}];
</code></pre>

<ul>
<li><a href="http://segmentfault.com/a/1190000000646452">从此爱上iOS Autolayout</a></li>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Container View Controllers]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/07/14/creating-custom-container-view-controllers/"/>
    <updated>2015-07-14T15:14:19+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/07/14/creating-custom-container-view-controllers</id>
    <content type="html"><![CDATA[<p>多数情况下，container view controller 就像普通的view controller。它管理着view，内容，与其他对象协同工作，并且响应在repsonder chain里的事件。</p>

<p>当你设计一个container的时候，你需要显式的在你的container，和它的子controller之间创建父子关系。如下图。注意，<code>不仅仅controller之间需要显式的指定关系，view之间的关系也需要显式的指定</code>。</p>

<p><img class="center" src="/images/iOS/2015-07-14_1.png" width="380"></p>

<!--more-->


<h3>常见的Container设计的例子</h3>

<h4>Navigation Controller管理着一些由子View Controller组成的栈</h4>

<p>如图所示，Navigation Controller管理着一系列不同的子ViewController。在这个栈最上面的ViewController的View会被显示出来。</p>

<p><img class="center" src="/images/iOS/2015-07-14_2.png" width="669"></p>

<p>Navigation Controller定义了一些行为</p>

<ul>
<li>topViewController &ndash; 目前显示的vc</li>
<li>viewControllers &ndash; 所有子vc</li>
<li>pushViewController:animated: &ndash; 显示</li>
<li>popViewControllerAnimated: &ndash; 弹出</li>
<li>delegate &ndash; 可以让使用者当状态改变的时候收到通知</li>
</ul>


<p>Navigation Controller 使用子VC的一些属性来改变当前显示的内容。</p>

<ul>
<li>navigationItem &ndash; 提供了navigation toolbar的内容</li>
<li>toolbarItem &ndash; 提供了底部bar的内容</li>
<li>editButtonItem &ndash; 提供了可以从navigation item访问子view的途径，这样就可以改变子view的edit mode</li>
</ul>


<h4>Tab Bar Controller使用一个子VC的集合</h4>

<p><img class="center" src="/images/iOS/2015-07-14_3.png" width="572"></p>

<p>Tab Bar Controller定义了一些行为：</p>

<ul>
<li>viewControllers &ndash; 所有子vc</li>
<li>selectedViewController &ndash; 设置或读取哪个子vc</li>
<li>delegate &ndash; 可以让使用者当状态改变的时候收到通知</li>
</ul>


<p>Tab Bar Controller 使用子VC的一些属性来改变当前显示的内容。</p>

<ul>
<li>tabBarItem &ndash; 提供了底部bar的内容</li>
</ul>


<h4>Page Controller使用DataSource去显示新的子VC</h4>

<p>Page Controller支持无限多的页面显示，所以把所有的page都放在内存中是不可能的。相反，page controller在需要的时候拉取需要的page。这样page controller就使用一个pull model而不是让app把所有的page一下子push到里面</p>

<p>Page Controller定义了一些行为：</p>

<ul>
<li>spineLocation &ndash; 定义page是如何组织的，有时候只显示一个page，有时候需要两个</li>
<li>transitionStyle &ndash; 定义了过场动画的风格</li>
</ul>


<h4>实现自定义Container Controller</h4>

<h5>增加和移除子vc</h5>

<p>始终应该记住的是，在<code>addSubview</code><em>之前</em><code>addChildViewController</code>,在<code>removeFromSuperVieww</code><em>之后</em><code>removeFromParentViewController</code>。</p>

<p>另外，设置子view的大小最好也在addSubview之前</p>

<p>增加</p>

<pre><code>- (void) displayContentController: (UIViewController*) content;
{
    [self addChildViewController:content];                 
    content.view.frame = [self frameForContentController]; 
    [self.view addSubview:self.currentClientView];
    [content didMoveToParentViewController:self];          
}
</code></pre>

<ul>
<li><code>addChildViewController</code>会自动调用<code>willMoveToPa</code></li>
</ul>


<p>移除</p>

<pre><code>- (void) hideContentController: (UIViewController*) content
{
    [content willMoveToParentViewController:nil];  
    [content.view removeFromSuperview];            
    [content removeFromParentViewController];      
}
</code></pre>

<h5>简单的转场动画</h5>

<pre><code>- (void) cycleFromViewController: (UIViewController*) oldC
        toViewController: (UIViewController*) newC
{
    [oldC willMoveToParentViewController:nil];                        
    [self addChildViewController:newC];

    newC.view.frame = [self newViewStartFrame];                       
    CGRect endFrame = [self oldViewEndFrame];

    [self transitionFromViewController: oldC toViewController: newC   
          duration: 0.25 options:0
          animations:^{
             newC.view.frame = oldC.view.frame;                       
             oldC.view.frame = endFrame;
          }
          completion:^(BOOL finished) {
             [oldC removeFromParentViewController];                   
             [newC didMoveToParentViewController:self];
          }];
}
</code></pre>

<h5>自定义显示和旋转的Callback行为</h5>

<p>多数时候不用管这个事情，但是有时候你希望自己控制消息发送的时机之类的情况</p>

<pre><code>- (BOOL) shouldAutomaticallyForwardAppearanceMethods
{
    return NO;
}

-(void) viewWillAppear:(BOOL)animated
{
    [self.child beginAppearanceTransition: YES animated: animated];
}

-(void) viewDidAppear:(BOOL)animated
{
    [self.child endAppearanceTransition];
}

-(void) viewWillDisappear:(BOOL)animated
{
    [self.child beginAppearanceTransition: NO animated: animated];
}

-(void) viewDidDisappear:(BOOL)animated
{
    [self.child endAppearanceTransition];
}
</code></pre>

<p>旋转与显示类似，首先要重载<code>shouldAutomaticallyForwardRotationMethods</code>，然后在合适的地方调用</p>

<ul>
<li><code>willRotateToInterfaceOrientation:duration:</code></li>
<li><code>willAnimateRotationToInterfaceOrientation:duration:</code></li>
<li><code>didRotateFromInterfaceOrientation:</code></li>
</ul>


<h5>Best practices</h5>

<ul>
<li>不要干这事！！因为毕竟实现一个复杂的container不是一件容易的事情</li>
<li>只访问子VC的最顶层的那个View，其他View不要碰！</li>
<li>如果需要子VC暴露一些接口，可以使用protocol！</li>
</ul>


<p>如下</p>

<pre><code>@protocol MyContentContainerProtocol &lt;NSObject&gt;
    ...
@end
- (void) displayContentController: (UIViewController&lt;MyContentContainerProtocol&gt;*) content;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Method]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/17/swift-method/"/>
    <updated>2015-06-17T12:42:28+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/17/swift-method</id>
    <content type="html"><![CDATA[<p>swift <code>method</code>分为<code>instance method</code>和<code>type method</code></p>

<p><code>instance method</code>是属于实例的函数，<code>type mothod</code>则是属于<code>type</code>的函数</p>

<!--more-->


<h3>Local and External Parameter Names for Method</h3>

<p><code>local and external parameter name</code>的默认行为并不等同于<code>function</code></p>

<p>swift的method的参数名字非常像objective－c。比如说，一般来说，swift的method的名字带有by， with， for等介词，例如incrementBy。</p>

<p>需要指出的是，swift默认会给第一个参数local parameter name，但是对于第二个以后参数则默认生成local and external parameter name。
    class Counter {
        var count : Int = 0
        func incrementBy(amount: Int, numberOfTimes: Int){
            count += amount * numberOfTimes
        }
    }
swift会把amount看作local name，但是会把numberOfTimes看作local and external name。所以调用该method，需要像如下这样
    let counter = Counter()
    counter.incrementBy(5, numberOfTimes: 3)
当然也可以显式的提供第一个参数的external name或者不提供非第一参数的external name
    class Counter2{
        var count : Int = 0
        func incrementBy(#amount: Int, _ numberOfTimes: Int){
            count += amount * numberOfTimes
        }
    }
    let count2 = Count2()
    count2.incrementBy(amount: 5, 3)</p>

<h3>Self Propety</h3>

<p>一般情况下可以不写，但是如果有歧义就需要写
    struct Point{
        var x = 0.0, y = 0.0
        func isToTheRightOfX(x: Double) -> Bool{
            return self.x > x   // must use self
        }
        func description() -> String{
            return &ldquo;x: (x), y: (y)&rdquo;) //no need to use self
        }
    }</p>

<h3>在instance method内改变值类型变量自身</h3>

<p>对于<code>value types</code>来说，一般情况下，instance method不能更改属性，但是加上mutating关键字来改变这点。
    struct Point{
        var x = 0.0, y = 0.0
        mutating func moveByX(deltaX: Double, y deltaY: Double){
            x += deltaX
            y += deltaY
        }
    }</p>

<h3>Assigning to self Within a Mutating Method</h3>

<pre><code>struct Point{
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double){
        self ＝ Point(x: x+deltaX, y: y + deltaY)
    }
}

enum TriStateSwitch {
    case Off, Low, High
    mutating func next() {
        switch self {
        case Off:
            self = Low
        case Low:
            self = High
        case High:
            self = Off
        }
    }
}
</code></pre>

<h3>Type Method</h3>

<p><code>type method</code>在类中使用关键字<code>class</code>来表示，在结构体和枚举中使用<code>static</code>来表示</p>

<p>在<code>type method</code>中，<code>self</code>表示类型本身，而不是实例本身</p>

<pre><code>​struct​ ​LevelTracker​ {
​    ​static​ ​var​ ​highestUnlockedLevel​ = ​1
​    ​static​ ​func​ ​unlockLevel​(​level​: ​Int​) {
​        ​if​ ​level​ &gt; ​highestUnlockedLevel​ { ​highestUnlockedLevel​ = ​level​ }
​    }
​    ​static​ ​func​ ​levelIsUnlocked​(​level​: ​Int​) -&gt; ​Bool​ {
​        ​return​ ​level​ &lt;= ​highestUnlockedLevel
​    }
​    ​var​ ​currentLevel​ = ​1
​    ​mutating​ ​func​ ​advanceToLevel​(​level​: ​Int​) -&gt; ​Bool​ {
​        ​if​ ​LevelTracker​.​levelIsUnlocked​(​level​) {
​            ​currentLevel​ = ​level
​            ​return​ ​true
​        } ​else​ {
​            ​return​ ​false
​        }
​    }
​}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Optional Chaining]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/17/swift-optional-chaining/"/>
    <updated>2015-06-17T09:19:59+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/17/swift-optional-chaining</id>
    <content type="html"><![CDATA[<p><code>optinal chainging</code>是一个查询和调用<code>optional</code>的property, method, subscript的过程。如果其中的<code>optional</code>没有nil，那么表达式求值成功。否则，失败。失败后返回nil。所以整个表达式返回值始终是<code>optional</code>类型。</p>

<!--more-->


<p>以下是一些sample code, 先构造一些类</p>

<pre><code>class Person{ var residence: Residence? }

class Residence {
    var rooms = [Room]()
    var numberOfRooms: Int { return rooms.count }

    subscript(i: Int) -&gt; Room {
        get { return rooms[i] }
        set { rooms[i] = newValue }
    }

    func printNumberOfRooms(){
        println("The number of rooms is \(numberOfRooms)")
    }
}

class Room {
    let name: String
    init(name: String){ self.name = name }
}

class Address {
    var buildingName: String?
    var buildingNumber: String?
    var street: String?

    func buildingIdentifier() -&gt; String? {
        if buildingName != nil {
            return buildingName
        } else if buildNumber != nil {
            return buldingNumber
        } else {
            return nil
        }
    }
}
</code></pre>

<p>下面就是如何使用<code>optional chain</code></p>

<pre><code>let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    println("john's residence has \(roomCount) rooms.")
}
// will print nothing

let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress //will fail
</code></pre>

<p>Residence里的方法printNumberOfRooms()没有返回值，但是这意味着该方法返回类型是Void，也就是返回值是(),也就是一个空的tuple. 在<code>optional chain</code>里，会返回Void?</p>

<pre><code>if john.residence?.printNumberOfRoom() != nil {
    println("It was possible to print the number of rooms."
} 
// will print nothing
</code></pre>

<p>对于通过<code>optional chain</code>来设置属性也一样</p>

<pre><code>if (john.residence?.address = someAddress) != nil {
    println("It was possible to set the address."
}
// will print nothing
</code></pre>

<p>通过<code>optional chaining</code>访问subscript</p>

<pre><code>if let firstRoomName = john.residence?[0].name {
    println("the first room name is \(firstRoomName)")
}
// will print nothing

let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse

if let firstRoomName = john.residence?[0].name {
    println("the first room name is \(firstRoomName)")
}
// prints "the first room name is Living Room"
</code></pre>

<p>访问<code>optional</code>的subscript</p>

<pre><code>var testScrores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0]++
testScores["Brain"]?[0]
</code></pre>

<p>多层的optional chain， 原则是
* 如果试图查询的东西的类型并非是<code>optional</code>的，会由于使用了chain而变成<code>optional</code>
* 如果正在查询的东西已经是<code>optional</code>的，它不会因为chain变得“更”<code>optional</code>（<code>optional</code>的<code>optional</code>)</p>

<p>下面是代码示例</p>

<pre><code>if let johnsStreet = john.residence?.address?.street{
    println("John's street name is \(johnsStreet)")
}
// print nothing

let johnsAddress = Address()
johnsAddress.buildingName = "The Larches"
johnsAddress.street = "Laurel Street"
john.residence?.address = johnsAddress

if let johnsStreet = john.residence?.address?.street{
    println("John's street name is \(johnsStreet)")
}
// print "John's street name is Laurel Street"

if let beginsWithThe = john.residence?.address?.buildingIdentifier()?.hasPrefix("The") {
    if beginWithThe {
        println("John's building identifier begins with \"The\".")
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
