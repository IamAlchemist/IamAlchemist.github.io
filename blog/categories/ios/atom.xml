<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | My Octopress Blog]]></title>
  <link href="http://IamAlchemist.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://IamAlchemist.github.io/"/>
  <updated>2015-07-14T17:43:07+08:00</updated>
  <id>http://IamAlchemist.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义Container View Controllers]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/07/14/creating-custom-container-view-controllers/"/>
    <updated>2015-07-14T15:14:19+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/07/14/creating-custom-container-view-controllers</id>
    <content type="html"><![CDATA[<p>多数情况下，container view controller 就像普通的view controller。它管理着view，内容，与其他对象协同工作，并且响应在repsonder chain里的事件。</p>

<p>当你设计一个container的时候，你需要显式的在你的container，和它的子controller之间创建父子关系。如下图。注意，<code>不仅仅controller之间需要显式的指定关系，view之间的关系也需要显式的指定</code>。</p>

<p><img class="center" src="/images/iOS/2015-07-14_1.png" width="380"></p>

<!--more-->


<h3>常见的Container设计的例子</h3>

<h4>Navigation Controller管理着一些由子View Controller组成的栈</h4>

<p>如图所示，Navigation Controller管理着一系列不同的子ViewController。在这个栈最上面的ViewController的View会被显示出来。</p>

<p><img class="center" src="/images/iOS/2015-07-14_2.png" width="669"></p>

<p>Navigation Controller定义了一些行为</p>

<ul>
<li>topViewController &ndash; 目前显示的vc</li>
<li>viewControllers &ndash; 所有子vc</li>
<li>pushViewController:animated: &ndash; 显示</li>
<li>popViewControllerAnimated: &ndash; 弹出</li>
<li>delegate &ndash; 可以让使用者当状态改变的时候收到通知</li>
</ul>


<p>Navigation Controller 使用子VC的一些属性来改变当前显示的内容。</p>

<ul>
<li>navigationItem &ndash; 提供了navigation toolbar的内容</li>
<li>toolbarItem &ndash; 提供了底部bar的内容</li>
<li>editButtonItem &ndash; 提供了可以从navigation item访问子view的途径，这样就可以改变子view的edit mode</li>
</ul>


<h4>Tab Bar Controller使用一个子VC的集合</h4>

<p><img class="center" src="/images/iOS/2015-07-14_3.png" width="572"></p>

<p>Tab Bar Controller定义了一些行为：</p>

<ul>
<li>viewControllers &ndash; 所有子vc</li>
<li>selectedViewController &ndash; 设置或读取哪个子vc</li>
<li>delegate &ndash; 可以让使用者当状态改变的时候收到通知</li>
</ul>


<p>Tab Bar Controller 使用子VC的一些属性来改变当前显示的内容。</p>

<ul>
<li>tabBarItem &ndash; 提供了底部bar的内容</li>
</ul>


<h4>Page Controller使用DataSource去显示新的子VC</h4>

<p>Page Controller支持无限多的页面显示，所以把所有的page都放在内存中是不可能的。相反，page controller在需要的时候拉取需要的page。这样page controller就使用一个pull model而不是让app把所有的page一下子push到里面</p>

<p>Page Controller定义了一些行为：</p>

<ul>
<li>spineLocation &ndash; 定义page是如何组织的，有时候只显示一个page，有时候需要两个</li>
<li>transitionStyle &ndash; 定义了过场动画的风格</li>
</ul>


<h4>实现自定义Container Controller</h4>

<h5>增加和移除子vc</h5>

<p>始终应该记住的是，在<code>addSubview</code><em>之前</em><code>addChildViewController</code>,在<code>removeFromSuperVieww</code><em>之后</em><code>removeFromParentViewController</code>。</p>

<p>另外，设置子view的大小最好也在addSubview之前</p>

<p>增加</p>

<pre><code>- (void) displayContentController: (UIViewController*) content;
{
    [self addChildViewController:content];                 
    content.view.frame = [self frameForContentController]; 
    [self.view addSubview:self.currentClientView];
    [content didMoveToParentViewController:self];          
}
</code></pre>

<ul>
<li><code>addChildViewController</code>会自动调用<code>willMoveToPa</code></li>
</ul>


<p>移除</p>

<pre><code>- (void) hideContentController: (UIViewController*) content
{
    [content willMoveToParentViewController:nil];  
    [content.view removeFromSuperview];            
    [content removeFromParentViewController];      
}
</code></pre>

<h5>简单的转场动画</h5>

<pre><code>- (void) cycleFromViewController: (UIViewController*) oldC
        toViewController: (UIViewController*) newC
{
    [oldC willMoveToParentViewController:nil];                        
    [self addChildViewController:newC];

    newC.view.frame = [self newViewStartFrame];                       
    CGRect endFrame = [self oldViewEndFrame];

    [self transitionFromViewController: oldC toViewController: newC   
          duration: 0.25 options:0
          animations:^{
             newC.view.frame = oldC.view.frame;                       
             oldC.view.frame = endFrame;
          }
          completion:^(BOOL finished) {
             [oldC removeFromParentViewController];                   
             [newC didMoveToParentViewController:self];
          }];
}
</code></pre>

<h5>自定义显示和旋转的Callback行为</h5>

<p>多数时候不用管这个事情，但是有时候你希望自己控制消息发送的时机之类的情况</p>

<pre><code>- (BOOL) shouldAutomaticallyForwardAppearanceMethods
{
    return NO;
}

-(void) viewWillAppear:(BOOL)animated
{
    [self.child beginAppearanceTransition: YES animated: animated];
}

-(void) viewDidAppear:(BOOL)animated
{
    [self.child endAppearanceTransition];
}

-(void) viewWillDisappear:(BOOL)animated
{
    [self.child beginAppearanceTransition: NO animated: animated];
}

-(void) viewDidDisappear:(BOOL)animated
{
    [self.child endAppearanceTransition];
}
</code></pre>

<p>旋转与显示类似，首先要重载<code>shouldAutomaticallyForwardRotationMethods</code>，然后在合适的地方调用</p>

<ul>
<li><code>willRotateToInterfaceOrientation:duration:</code></li>
<li><code>willAnimateRotationToInterfaceOrientation:duration:</code></li>
<li><code>didRotateFromInterfaceOrientation:</code></li>
</ul>


<h5>Best practices</h5>

<ul>
<li>不要干这事！！因为毕竟实现一个复杂的container不是一件容易的事情</li>
<li>只访问子VC的最顶层的那个View，其他View不要碰！</li>
<li>如果需要子VC暴露一些接口，可以使用protocol！</li>
</ul>


<p>如下</p>

<pre><code>@protocol MyContentContainerProtocol &lt;NSObject&gt;
    ...
@end
- (void) displayContentController: (UIViewController&lt;MyContentContainerProtocol&gt;*) content;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Method]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/17/swift-method/"/>
    <updated>2015-06-17T12:42:28+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/17/swift-method</id>
    <content type="html"><![CDATA[<p>swift <code>method</code>分为<code>instance method</code>和<code>type method</code></p>

<p><code>instance method</code>是属于实例的函数，<code>type mothod</code>则是属于<code>type</code>的函数</p>

<!--more-->


<h3>Local and External Parameter Names for Method</h3>

<p><code>local and external parameter name</code>的默认行为并不等同于<code>function</code></p>

<p>swift的method的参数名字非常像objective－c。比如说，一般来说，swift的method的名字带有by， with， for等介词，例如incrementBy。</p>

<p>需要指出的是，swift默认会给第一个参数local parameter name，但是对于第二个以后参数则默认生成local and external parameter name。
    class Counter {
        var count : Int = 0
        func incrementBy(amount: Int, numberOfTimes: Int){
            count += amount * numberOfTimes
        }
    }
swift会把amount看作local name，但是会把numberOfTimes看作local and external name。所以调用该method，需要像如下这样
    let counter = Counter()
    counter.incrementBy(5, numberOfTimes: 3)
当然也可以显式的提供第一个参数的external name或者不提供非第一参数的external name
    class Counter2{
        var count : Int = 0
        func incrementBy(#amount: Int, _ numberOfTimes: Int){
            count += amount * numberOfTimes
        }
    }
    let count2 = Count2()
    count2.incrementBy(amount: 5, 3)</p>

<h3>Self Propety</h3>

<p>一般情况下可以不写，但是如果有歧义就需要写
    struct Point{
        var x = 0.0, y = 0.0
        func isToTheRightOfX(x: Double) -> Bool{
            return self.x > x   // must use self
        }
        func description() -> String{
            return &ldquo;x: (x), y: (y)&rdquo;) //no need to use self
        }
    }</p>

<h3>在instance method内改变值类型变量自身</h3>

<p>对于<code>value types</code>来说，一般情况下，instance method不能更改属性，但是加上mutating关键字来改变这点。
    struct Point{
        var x = 0.0, y = 0.0
        mutating func moveByX(deltaX: Double, y deltaY: Double){
            x += deltaX
            y += deltaY
        }
    }</p>

<h3>Assigning to self Within a Mutating Method</h3>

<pre><code>struct Point{
    var x = 0.0, y = 0.0
    mutating func moveByX(deltaX: Double, y deltaY: Double){
        self ＝ Point(x: x+deltaX, y: y + deltaY)
    }
}

enum TriStateSwitch {
    case Off, Low, High
    mutating func next() {
        switch self {
        case Off:
            self = Low
        case Low:
            self = High
        case High:
            self = Off
        }
    }
}
</code></pre>

<h3>Type Method</h3>

<p><code>type method</code>在类中使用关键字<code>class</code>来表示，在结构体和枚举中使用<code>static</code>来表示</p>

<p>在<code>type method</code>中，<code>self</code>表示类型本身，而不是实例本身</p>

<pre><code>​struct​ ​LevelTracker​ {
​    ​static​ ​var​ ​highestUnlockedLevel​ = ​1
​    ​static​ ​func​ ​unlockLevel​(​level​: ​Int​) {
​        ​if​ ​level​ &gt; ​highestUnlockedLevel​ { ​highestUnlockedLevel​ = ​level​ }
​    }
​    ​static​ ​func​ ​levelIsUnlocked​(​level​: ​Int​) -&gt; ​Bool​ {
​        ​return​ ​level​ &lt;= ​highestUnlockedLevel
​    }
​    ​var​ ​currentLevel​ = ​1
​    ​mutating​ ​func​ ​advanceToLevel​(​level​: ​Int​) -&gt; ​Bool​ {
​        ​if​ ​LevelTracker​.​levelIsUnlocked​(​level​) {
​            ​currentLevel​ = ​level
​            ​return​ ​true
​        } ​else​ {
​            ​return​ ​false
​        }
​    }
​}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Optional Chaining]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/17/swift-optional-chaining/"/>
    <updated>2015-06-17T09:19:59+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/17/swift-optional-chaining</id>
    <content type="html"><![CDATA[<p><code>optinal chainging</code>是一个查询和调用<code>optional</code>的property, method, subscript的过程。如果其中的<code>optional</code>没有nil，那么表达式求值成功。否则，失败。失败后返回nil。所以整个表达式返回值始终是<code>optional</code>类型。</p>

<!--more-->


<p>以下是一些sample code, 先构造一些类</p>

<pre><code>class Person{ var residence: Residence? }

class Residence {
    var rooms = [Room]()
    var numberOfRooms: Int { return rooms.count }

    subscript(i: Int) -&gt; Room {
        get { return rooms[i] }
        set { rooms[i] = newValue }
    }

    func printNumberOfRooms(){
        println("The number of rooms is \(numberOfRooms)")
    }
}

class Room {
    let name: String
    init(name: String){ self.name = name }
}

class Address {
    var buildingName: String?
    var buildingNumber: String?
    var street: String?

    func buildingIdentifier() -&gt; String? {
        if buildingName != nil {
            return buildingName
        } else if buildNumber != nil {
            return buldingNumber
        } else {
            return nil
        }
    }
}
</code></pre>

<p>下面就是如何使用<code>optional chain</code></p>

<pre><code>let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    println("john's residence has \(roomCount) rooms.")
}
// will print nothing

let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress //will fail
</code></pre>

<p>Residence里的方法printNumberOfRooms()没有返回值，但是这意味着该方法返回类型是Void，也就是返回值是(),也就是一个空的tuple. 在<code>optional chain</code>里，会返回Void?</p>

<pre><code>if john.residence?.printNumberOfRoom() != nil {
    println("It was possible to print the number of rooms."
} 
// will print nothing
</code></pre>

<p>对于通过<code>optional chain</code>来设置属性也一样</p>

<pre><code>if (john.residence?.address = someAddress) != nil {
    println("It was possible to set the address."
}
// will print nothing
</code></pre>

<p>通过<code>optional chaining</code>访问subscript</p>

<pre><code>if let firstRoomName = john.residence?[0].name {
    println("the first room name is \(firstRoomName)")
}
// will print nothing

let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse

if let firstRoomName = john.residence?[0].name {
    println("the first room name is \(firstRoomName)")
}
// prints "the first room name is Living Room"
</code></pre>

<p>访问<code>optional</code>的subscript</p>

<pre><code>var testScrores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0]++
testScores["Brain"]?[0]
</code></pre>

<p>多层的optional chain， 原则是
* 如果试图查询的东西的类型并非是<code>optional</code>的，会由于使用了chain而变成<code>optional</code>
* 如果正在查询的东西已经是<code>optional</code>的，它不会因为chain变得“更”<code>optional</code>（<code>optional</code>的<code>optional</code>)</p>

<p>下面是代码示例</p>

<pre><code>if let johnsStreet = john.residence?.address?.street{
    println("John's street name is \(johnsStreet)")
}
// print nothing

let johnsAddress = Address()
johnsAddress.buildingName = "The Larches"
johnsAddress.street = "Laurel Street"
john.residence?.address = johnsAddress

if let johnsStreet = john.residence?.address?.street{
    println("John's street name is \(johnsStreet)")
}
// print "John's street name is Laurel Street"

if let beginsWithThe = john.residence?.address?.buildingIdentifier()?.hasPrefix("The") {
    if beginWithThe {
        println("John's building identifier begins with \"The\".")
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Extension]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/17/swift-extension/"/>
    <updated>2015-06-17T07:45:07+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/17/swift-extension</id>
    <content type="html"><![CDATA[<p><code>extensions</code>可以给已有的type增加功能，而且不必访问源代码(<code>retroactive modeling</code>)</p>

<p><code>extensions</code>可以
* 增加<code>computed property</code>和<code>computed static property</code>
* 定义<code>instance methods</code>和<code>type methods</code>
* 提供新的<code>initializers</code>
* 定义<code>subscripts</code>
* 定义和使用新的<code>nested types</code>
* 为一个<code>type</code>实现一个<code>protocol</code></p>

<p><code>extension</code>不可以
* <code>extension</code>可以增加新的<code>funtionality</code>，但是不能覆盖以有的<code>functionality</code>
* <code>extension</code>不能增加<code>stored properties</code>，或者给存在的<code>property</code>增加<code>property observers</code>
* <code>extension</code>不能增加新的<code>designated initializer</code></p>

<!--more-->


<h4>Extension 语法</h4>

<pre><code>extension SomeType {
    ...
}

extiosion SomeType: Someprotocol, AnotherProtocol {
    ...
}
</code></pre>

<p>一个有趣的例子</p>

<pre><code>extension Double {
    var km: Double { return self * 1000.0 }
    var m: Double { return self }
}

let aMarathon = 42.m + 195.m
println("A marathon is \(aMarathon) masters long")
</code></pre>

<h4>Initializers</h4>

<pre><code>struct Size { var width = 0.0, height = 0.0 }
struct Point { var x = 0.0, y = 0.0 }
struct Rect {
    var origin = Point()
    var size = Size()
}

extension Rect{
    init(center: Point, size: Size){
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x:originX, y:originY), size: size)
    }
}
</code></pre>

<h4>Methods</h4>

<pre><code>extension Int{
    func repetitions(task: ()-&gt; ()){
        for i in 0..&lt;self {
            task()
        }
    }
}

3.repetitions{ println("hello") }
</code></pre>

<h4>Mutating Instance Methods</h4>

<pre><code>extension Int {
    mutating func square(){
        self = self * self
    }
}

var someInt = 3.square()
</code></pre>

<h4>Subscripts</h4>

<pre><code>extension Int {
    subscript(var digitIndex: Int) -&gt; Int{
        var decimalBase = 1
        while digitIndex &gt; 0 {
            decimalBase *= 10
            --digitIndex
        }

        return (self / decimalBase) % 10
    }
}

74631295[1] //return 9
</code></pre>

<h4>Nested Tyeps</h4>

<pre><code>extension Int {
    enum Kind {
        case Negative, Zero, Positive
    }

    var kind: Kind {
        switch self {
        case 0: retrun .Zero
        case let x where x &gt; 0: return .Positive
        default: return .Negative
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中optional]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/12/swift-optional/"/>
    <updated>2015-06-12T15:37:14+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/12/swift-optional</id>
    <content type="html"><![CDATA[<p>关于<code>optional</code>，最需要说的是为什么需要<code>optional</code>，比如说在objctive-c中就没有，也是可以表示一个不存在的对象的。只需要用NULL就可以了。但是如何表示一个不存在的value类型的变量呢？比如一个不存在的struture？objective-c就没有太好的办法了，一般来说是用一个特殊值NSNotFound来表示。不过swift可以让一切不存在的变量都为nil，这就是<code>optional</code>的目的</p>

<!--more-->


<p>关于<code>optional</code>，剩下的只是swift里面有关的特殊术语，搞清楚还是很有必要的</p>

<h4>Force Unwrapping</h4>

<p><code>Force Unwarpping</code>指的是把<code>optional</code>对象转化成一个非空的对象</p>

<h4>Optional Binding</h4>

<p>其基本形式是</p>

<pre><code>if let constantName = someOptional

while let constantName = someOptional
</code></pre>

<h4>Implicity Unwrapped Optionals</h4>

<p>一个optinal变量可以定义为<code>implicity unwrapped optionals</code>, 那么使用这个变量的时候就不再需要force unwrap, 一旦unwrap失败，程序会崩溃</p>

<pre><code>var storyboardName : String! = "hello"
</code></pre>
]]></content>
  </entry>
  
</feed>
