<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | My Octopress Blog]]></title>
  <link href="http://IamAlchemist.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://IamAlchemist.github.io/"/>
  <updated>2015-06-12T15:54:04+08:00</updated>
  <id>http://IamAlchemist.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift中optional]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/12/swift-optional/"/>
    <updated>2015-06-12T15:37:14+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/12/swift-optional</id>
    <content type="html"><![CDATA[<p>关于optional，最需要说的是为什么需要optional，比如说在objctive-c中就没有，也是可以表示一个不存在的对象的。只需要用NULL就可以了。但是如何表示一个不存在的value类型的变量呢？比如一个不存在的struture？objective-c就没有太好的办法了，一般来说是用一个特殊值NSNotFound来表示。不过swift可以让一切不存在的变量都为nil，这就是optional的目的</p>

<!--more-->


<p>关于optional，剩下的只是swift里面有关的特殊术语，搞清楚还是很有必要的</p>

<h4>Force Unwrapping</h4>

<p>Force Unwarpping指的是把optional对象转化成一个非空的对象</p>

<h4>Optional Binding</h4>

<p>其基本形式是</p>

<pre><code>if let constantName = someOptional

while let constantName = someOptional
</code></pre>

<h4>Implicity Unwrapped Optionals</h4>

<p>一个optinal变量可以定义为<code>implicity unwrapped optionals</code>, 那么使用这个变量的时候就不再需要force unwrap, 一旦unwrap失败，程序会崩溃</p>

<pre><code>var storyboardName : String! = "hello"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的类型转换]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/11/typecastinginswift/"/>
    <updated>2015-06-11T11:34:01+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/11/typecastinginswift</id>
    <content type="html"><![CDATA[<p>Swift中使用<code>as</code>和<code>is</code>运算符来进行类型转换</p>

<!--more-->


<h4>一个类继承的例子</h4>

<pre><code>class MediaItem{
}

class Movie: MediaItem{
    var director : String
    init(director: String){ self.director = director; super.init() }

}

class Song: MediaItem{
    var artist : String
    init(artist: String){ self.artist = artist; super.init() }
}
</code></pre>

<h4>类型检查使用<code>is</code></h4>

<pre><code>let library = [Movie("d1"), Song("a1"), Song("a2"), Movie("d2")]

var movieCount = 0
var songCount = 0

for item in library {
    if item as Movie {
        ++movieCount
    } else if item is Song {
        ++songCount
    }
}
</code></pre>

<p>值得一提的是，<code>is</code>不仅仅用来检测有继承关系的类，而且可以用来检测是否实现了某个接口</p>

<pre><code>protocal HasArea{
    var area: Double { get }
}

class Circle: HasArea{
    var radius: Double
    var area: Double { return 3.14 * radius * radius }
    init(radius: Double){ self.radius = radius }
}

var circle = Circle(2.5)
if circle is HasArea {
    println("Area: \(circle.area)")
}
</code></pre>

<h4>类型转换</h4>

<p>可以使用<code>as</code>来进行类型转换</p>

<p>可以用两种方式来使用<code>as</code>, <code>as?</code>和<code>as!</code></p>

<p><code>as?</code>表示不确定该转换是否能成功，<code>as!</code>表示一定会成功，但是如果运行时转换失败的话，程序会崩掉</p>

<pre><code>for item in library {
    if let movie = item as? Movie {
        println("Director: \(movie.director)")
    } else if let song = item as? Song {
        println("Artist: \(song.artist)")
    }
}
</code></pre>

<h4><code>Any</code>和<code>AnyObject</code>的类型转换</h4>

<p>其实，<code>Any</code>和<code>AnyObject</code>的转换和普通的类型转换是一样的。值得说的是为什么swift要有他们两个。</p>

<ul>
<li><code>AnyObject</code>可以代表任何class类型的实例</li>
<li><code>Any</code>却可以代表任何类型的实例，包括funtion类型</li>
</ul>


<p>举两个例子，第一个例子</p>

<pre><code>let someObjects: [AnyObject] = [Movie('d1'),Movie('d1'),Movie('d1')]
for object in someObjects{
    let movie = object as! Movie
    println("Movie director: \(movie.director)")
}
</code></pre>

<p>该例子中，还可以直接cast整个数组</p>

<pre><code>for movie in someObjects as! [Movie] {
    println("Movie director: \(movie.director)")
}
</code></pre>

<p>另外一个是关于<code>Any</code>的例子</p>

<pre><code>var things = [Any]()

things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie("d1"))
things.append({(name: String) -&gt; String in 
    "Hello, \(name)" })

for thing in things{
    switch thing{
        case 0 as Int: 
            println("zero as an Int")
        case 0 as Double:
            println("zero as an Double")
        case let someInt as Int:
            println("an integer value of \(someInt)")
        case let someDouble as Double where someDouble &gt; 0:
            println("a positive double : \(someDouble)")
        case is Double:
            println("some other double value &lt;= 0")
        case let someString as String:
            println("a string value : \(someString)")
        case let (x, y) as (Double, Double) :
            println("an (x,y) point at \(x), \(y)")
        case let movie as Movie:
            println("a movie director: \(movie.director)")
        case let stringConverter as String -&gt; String:
            println(stringConverter("Michael")
        default:
            println("something else")
    }
}
</code></pre>

<p>需要指出，在switch的case语句中，使用的<code>as</code>是强制转换版的，并不写作<code>as?</code>或者<code>as!</code>，在case语句中使用这种检查总是安全的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用swift生成Frameworks]]></title>
    <link href="http://IamAlchemist.github.io/blog/2015/06/09/shi-yong-swiftsheng-cheng-frameworks/"/>
    <updated>2015-06-09T19:04:02+08:00</updated>
    <id>http://IamAlchemist.github.io/blog/2015/06/09/shi-yong-swiftsheng-cheng-frameworks</id>
    <content type="html"><![CDATA[<h3>制作Dynamically Linked Frameworks</h3>

<!--more-->


<h3>一个普通的Swift file</h3>

<pre><code>class SwiftFrameworks {
    init() { println("Class init") }
    func doSomething() { println("Yeah, it works") }
} 
</code></pre>

<p>为了让它可以在framework中工作，需要让所有类和方法都是<em>public</em>的</p>

<pre><code>public class SwiftFrameworks { 
    public init() { println("Class init") } 
    public func doSomething() { println("Yeah, it works") } 
} 
</code></pre>

<h3>建立framework工程</h3>

<p><img class="center" src="/images/iOS/2015-06-09_1.png" width="600"></p>

<h3>添加刚才的swift文件</h3>

<p><img class="center" src="/images/iOS/2015-06-09_4.png" width="600"></p>

<h3>编译</h3>

<p>有时候编译时候并不能产生target，切换一下设备（可能是xcode的bug），然后找到build好的target所在文件夹</p>

<p><img class="center" src="/images/iOS/2015-06-09_2.png" width="600"></p>

<h3>添加到测试工程中</h3>

<p>把编译好的framework拖拽到测试工程中，之后在embed中添加该framework</p>

<p><img class="center" src="/images/iOS/2015-06-09_3.png" width="600"></p>

<p>然后</p>

<pre><code>import SwiftFramework
let swiftFramework = SwiftFramework()
swiftFramework.helloWorld()
</code></pre>

<p>大功告成～</p>
]]></content>
  </entry>
  
</feed>
